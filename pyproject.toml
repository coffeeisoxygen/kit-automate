[project]
name = "kit-automate"
dynamic = ["version"]
description = "Automatisasi website dengan support modem pool gsm untuk sistem msisdn dan otp verifikasi"
readme = "README.md"
requires-python = ">=3.12"
license = "MIT"
authors = [{ name = "ahmad hasan maki", email = "hasanmaki.ahmad@gmail.com" }]
keywords = ["automation", "gui", "web", "pyside6", "playwright", "gsm", "modem"]

dependencies = [
    "pyside6>=6.7.0",
    "loguru>=0.7.2",
    "pyserial>=3.5",
    "sqlalchemy>=2.0.41",
    "pydantic>=2.11.5",
]

[project.scripts]
kit-automate = "kit_automate.__main__:main"

[project.urls]
homepage = "https://github.com/coffeeisoxygen/kit-automate"
repository = "https://github.com/coffeeisoxygen/kit-automate"

[build-system]
requires = ["setuptools>=64", "setuptools-scm>=8"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
write_to = "src/kit_automate/_version.py"
version_scheme = "guess-next-dev"
local_scheme = "no-local-version"
fallback_version = "0.1.0"

[dependency-groups]
dev = [
    "pre-commit>=4.2.0",
    "ruff>=0.8.0",
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "pytest-mock>=3.12.0",
    "pytest-asyncio>=1.0.0",
    "pytest-html>=4.1.1",
    "pyright>=1.1.401",
    "nuitka>=2.5.7",
    "ordered-set>=4.1.0",
    "pytest-timeout>=2.4.0",
    "pytest-xdist>=3.7.0",
    "logot>=1.4.0",
]

# configuration start here we can split itu ruff.toml, pre-commit.toml, pytest.ini, etc but keep it simple for now
[tool.ruff]
target-version = "py312"
line-length = 88
indent-width = 4
respect-gitignore = true
extend-exclude = [
    "__pycache__",
    ".git",
    ".venv",
    "venv",
    "build",
    "dist",
    "*.egg-info",
    ".pytest_cache",
    ".ruff_cache",
    "src/kit_automate/_version.py", # Generated file only
]

[tool.ruff.lint]
fixable = ["ALL"]
unfixable = []
select = [
    "F",     # Pyflakes (error detection)
    "E",     # pycodestyle errors
    "W",     # pycodestyle warnings
    "I",     # isort (import sorting)
    "B",     # flake8-bugbear (common bugs + security)
    "C",     # flake8-comprehensions
    "Q",     # flake8-quotes
    "UP",    # pyupgrade (modern Python security)
    "S",     # flake8-bandit (security) âœ… Enhanced
    "N",     # pep8-naming
    "RUF",   # ruff-specific rules
    "D",     # pydocstyle
    "ASYNC", # Async security issues
    "LOG",   # Logging security
    "PTH",   # Path traversal security
    "ARG",   # Argument validation
    "PLR",   # Pylint rules
    "T",     # Type checking
]

ignore = [
    "E501",    # Line too long (handled by formatter)
    "S101",    # Use of assert (needed in tests)
    "B008",    # Function calls in argument defaults
    "D100",    # Missing docstring in public module
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "D103",    # Missing docstring in public function
    "D104",    # Missing docstring in public package
    "D105",    # Missing docstring in magic method
    "D107",    # Missing docstring in __init__
    "D401",    # First line should be in imperative mood
    "D203",    # 1 blank line required before class docstring (conflicts with D211)
    "D213",    # Multi-line docstring summary should start at the second line (conflicts with D212)
    "N803",    # Argument name should be lowercase
    "N806",    # Variable in function should be lowercase
    "S603",    # subprocess-shell-use
    "T201",    # print() statements (allow in scripts)
    "PLR2004", # Magic value used in comparison
    "S101",    # assert (OK in tests)
    "S603",    # subprocess (controlled usage for GSM)
    "S607",    # partial executable path (OK for automation)
    "S108",    # hardcoded temp file (OK in controlled env)
]
[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "Q000",    # Allow single quotes in tests
    "S101",    # Assert usage OK in tests
    "D",       # Docstrings not required in all test functions
    "UP038",   # Consistent tuple syntax in tests
    "S106",    # Hardcoded password OK in test fixtures
    "PLR6301", # Method could be a function (OK in test classes)
    "PLR2004", # Magic values in tests (OK for test data)
    "ARG001",  # Unused function arguments (fixtures)
    "ARG002",  # Unused method arguments (test methods)
    "PLR0913", # Too many arguments (OK for test setup)
    "PLR0915", # Too many statements (OK for complex test scenarios)
    "C901",    # Too complex (OK for comprehensive tests)
    "T201",    # Print statements (OK for debugging tests)
    "B008",    # Function calls in defaults (OK for test fixtures)
]
"scripts/**/*.py" = [
    "T201",    # print() statements OK in scripts
    "D",       # Docstrings not required in scripts
    "ARG001",  # Unused function arguments (fixtures)
    "PLR2004", # Magic values in tests
    "S603",    # subprocess for build scripts
    "S607",    # partial paths for tools
]
"src/kit_automate/__init__.py" = ["D104"] # Package docstring
"src/kit_automate/_version.py" = ["ALL"]
"src/kit_automate/__main__.py" = ["T201"] # Allow prints in main entry

# âœ… Add docstring configuration to prevent conflicts
[tool.ruff.lint.pydocstyle]
convention = "google"
ignore-decorators = ["typing.overload"]

[tool.ruff.lint.flake8-quotes]
inline-quotes = "double"
multiline-quotes = "double"
docstring-quotes = "double"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "lf"
docstring-code-format = true
docstring-code-line-length = "dynamic"

[tool.ruff.lint.isort]
known-first-party = ["kit_automate"]
section-order = [
    "future",
    "standard-library",
    "third-party",
    "first-party",
    "local-folder",
]
split-on-trailing-comma = true
force-sort-within-sections = true

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 15
max-returns = 8
max-statements = 60

# ==========================================
# ðŸ“Š COVERAGE CONFIGURATION
# ==========================================

[tool.coverage.run]
source = ["src"]
data_file = ".reports/coverage/.coverage"
omit = [
    "*/tests/*",
    "*/_version.py",
    "*/scripts/*",
    # "*/__main__.py",
    "*/site-packages/*",
    "*/.venv/*",
    "*/shibokensupport/*",
    "*/pyscript/*",
    "*/signature_bootstrap.py",
    "kit_automate/__init__.py",          # âœ… Exclude init files
    "kit_automate/_version.py",          # âœ… Exclude version file
    "kit_automate/shared/custom_log.py", # âœ… Exclude main entry point
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "if TYPE_CHECKING:",
]
show_missing = true
# âœ… TAMBAH: Skip external packages
skip_covered = false
skip_empty = true

[tool.coverage.html]
directory = ".reports/coverage/html"
# âœ… TAMBAH: Skip external files in HTML report
skip_covered = false
skip_empty = true

# ==========================================
# ðŸ§ª PYTEST CONFIGURATION - SIMPLIFIED
# ==========================================

[tool.pytest.ini_options]
testpaths = ["tests", "src"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

# âœ… Performance and reliability
timeout = 300             # 5 minutes max per test
timeout_method = "thread"

# âœ… Doctest configuration
doctest_optionflags = [
    "NORMALIZE_WHITESPACE",
    "IGNORE_EXCEPTION_DETAIL",
    "ALLOW_UNICODE",
    "ALLOW_BYTES",
]

addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src/kit_automate",
    "--cov-report=term",
    "--cov-report=term-missing",
    "--cov-report=html:.reports/coverage/html",
    "--cov-report=xml:.reports/coverage/coverage.xml",
    "--cov-fail-under=80",
    "--cov-config=pyproject.toml",
    "--html=.reports/tests/report.html",
    "--self-contained-html",
    "--doctest-modules",
    "--tb=short",
    "-ra",
    "--showlocals",
    "-v",
]

# âœ… Enhanced logging
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
log_auto_indent = true

# âœ… Basic markers (benchmark removed for now)
markers = [
    "unit: Fast unit tests",
    "integration: Integration tests",
    "gui: GUI tests (requires display)",
    "web: Web automation tests (requires browser)",
    "serial: Serial communication tests (requires hardware)",
    "slow: Slow tests (> 5 seconds)",
    "windows_only: Tests that only run on Windows",
    "network: Tests requiring network access",
    "database: Tests requiring database",
    "hardware: Tests requiring physical hardware",
    "smoke: Smoke tests for quick validation",
    "regression: Regression tests",
]

# âœ… Enhanced warning filters
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore:.*PySide6.*:DeprecationWarning",
    "ignore:.*playwright.*:DeprecationWarning",
    "ignore:.*pkg_resources.*:DeprecationWarning",
    "ignore:.*loguru.*:DeprecationWarning",        # âœ… Add Loguru
    "ignore::UserWarning:loguru.*",                # âœ… Ignore Loguru warnings
    # "error::UserWarning",                        # âœ… Remove - conflicts with Loguru
]

# âœ… Minimum version requirements
minversion = "8.0"
